{"version":3,"sources":["components/cardapp/cardapp.component.jsx","components/card-list/card-list.component.jsx","components/search-list/search-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Cardapp","props","Col","lg","Card","className","Img","variant","src","monster","id","Body","Text","name","email","CardList","Row","map","key","SearchList","placeholder","handleChange","Form","inline","FormControl","type","onChange","Button","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Container","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8TAGaA,EAAU,SAACC,GACpB,OACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,UAAU,aACZ,kBAACD,EAAA,EAAKE,IAAN,CAAUC,QAAQ,MAAMC,IAAG,+BAA0BP,EAAMQ,QAAQC,GAAxC,4BAC3B,kBAACN,EAAA,EAAKO,KAAN,KACI,kBAACP,EAAA,EAAKQ,KAAN,CAAWP,UAAU,aAAaJ,EAAMQ,QAAQI,MAChD,2BAAIZ,EAAMQ,QAAQK,W,QCLzBC,EAAW,SAACd,GACrB,OAEQ,kBAACe,EAAA,EAAD,KACKf,EAAMQ,QAAQQ,KAAI,SAAAR,GAAO,OAClB,kBAAC,EAAD,CAASS,IAAKT,EAAQC,GAAID,QAASA,S,wBCP9CU,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACtB,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOL,YAAaA,EAAaf,UAAU,qBAAqBqB,SAAUL,IAC5F,kBAACM,EAAA,EAAD,CAAQpB,QAAQ,kBAAkBF,UAAU,sBAA5C,Y,QC6CSuB,G,kBA3Cb,aAAe,IAAD,8BACZ,+CAiBFP,aAAe,SAAAQ,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAjBpC,EAAKC,MAAQ,CACXzB,QAAS,GACTsB,YAAY,IAJF,E,iFAYO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAErB,QAAS8B,S,+BAMlC,IAAD,EACyBC,KAAKN,MAA7BzB,EADD,EACCA,QAAQsB,EADT,EACSA,YAGVU,EAAkBhC,EAAQiC,QAAO,SAAAjC,GAAO,OAC5CA,EAAQI,KAAK8B,cAAcC,SAASb,EAAYY,kBAClD,OACE,kBAACE,EAAA,EAAD,KACE,yBAAKxC,UAAU,OACb,wBAAIA,UAAU,gBAAd,kBACF,kBAAC,EAAD,CACEe,YAAc,kBACdC,aAAgBmB,KAAKnB,eAEvB,kBAAC,EAAD,CAAUZ,QAAWgC,U,GApCXK,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef73f7bb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, Col } from 'react-bootstrap';\r\n\r\nexport const Cardapp = (props) => {\r\n    return (\r\n        <Col lg={3}>\r\n            <Card className=\"card-list\">\r\n                <Card.Img variant=\"top\" src={`https://robohash.org/${props.monster.id}?set=set2&size=140x140`} />\r\n                <Card.Body>\r\n                    <Card.Text className=\"card-name\">{props.monster.name}</Card.Text>\r\n                    <p>{props.monster.email}</p>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './card-list.style.css';\r\nimport { Cardapp } from '../cardapp/cardapp.component'\r\nimport {  Row } from 'react-bootstrap';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        \r\n            <Row>\r\n                {props.monster.map(monster =>\r\n                        <Cardapp key={monster.id} monster={monster}/> )\r\n                }\r\n            </Row>\r\n      \r\n\r\n\r\n\r\n    )\r\n}","import React from 'react';\r\nimport {Form,FormControl,Button} from 'react-bootstrap';\r\n\r\nexport const SearchList = ({placeholder,handleChange}) => (\r\n    <Form inline>\r\n      <FormControl type=\"text\" placeholder={placeholder} className=\"mr-sm-2 mb-2 w-100\" onChange={handleChange} />\r\n      <Button variant=\"outline-success\" className=\"mr-sm-2 mb-2 w-100\">Search</Button>\r\n    </Form>\r\n    // <input type='search' placeholder={placeholder} onChange={handleChange} />    \r\n)","import React, { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport { SearchList } from './components/search-list/search-list.component';\nimport { Container} from 'react-bootstrap';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monster: [],\n      searchField:''\n    }\n\n    // this.handleChange = this.handleChange.bind(this);\n  };\n\n \n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monster: users }))\n  }\n\n  handleChange = e => {\n    this.setState({searchField:e.target.value})\n  }\n  render() {\n    const { monster,searchField } = this.state; // new way for below two lines\n    // const monster = this.state.monster;\n    // const searchField = this.state.searchField;\n    const filteredMonster = monster.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()) )\n    return (\n      <Container>\n        <div className=\"App\">\n          <h1 className=\"monstor-head\"> Monster Rolex</h1>\n        <SearchList \n          placeholder = 'search monsters'\n          handleChange = {this.handleChange}\n        />\n        <CardList monster = {filteredMonster} />\n      </div>\n      </Container>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}